set(vmlinuxa ${CMAKE_CURRENT_LIST_DIR}/../vmlinux.a)
set(output "${CMAKE_CURRENT_LIST_DIR}/initsyms.gen.c")

execute_process(
    COMMAND llvm-nm --defined-only --format=just-symbols ${vmlinuxa}
    OUTPUT_VARIABLE syms
    RESULT_VARIABLE rr)

if(rr)
    message(FATAL_ERROR "Failed to extract symbols (${rr})")
endif()

string(REPLACE "\n" ";" syms "${syms}")

set(postfixes # ORDERED list for symbols suffixes
    0 1 1s 2 2s 3 3s 4 4s 5 5s
    rootfs 6 6s 7 7s)

# Pass1: Pickup symbols with "__initcall__"
set(initsyms)
foreach(n ${syms})
    if(${n} MATCHES "__initcall__")
        list(APPEND initsyms ${n})
    endif()
endforeach()

# Pass2: generate symlist for each postfixes
foreach(p ${postfixes})
    foreach(n ${initsyms})
        if(${n} MATCHES "${p}$")
            message(STATUS "${p}: ${n}")
            list(APPEND syms_${p} ${n})
        endif()
    endforeach()
endforeach()

# Pass3: Sort(concat) symlist
set(totalsyms)
foreach(p ${postfixes})
    LIST(APPEND totalsyms ${syms_${p}})
endforeach()

# Pass4: Generate initcall_listsym
set(initcall_externs)
set(initcall_listsym "")
set(initcall_listsym_nonfirst)
foreach(p ${totalsyms})
    set(initcall_externs "${initcall_externs}extern initcall_t ${p};\n")
    if(initcall_listsym_nonfirst)
        set(nonfirst_comma ",")
    else()
        set(nonfirst_comma "")
        set(initcall_listsym_nonfirst ON)
    endif()
    set(initcall_listsym "${initcall_listsym}\n\t${nonfirst_comma}${p}")
endforeach()

# Pass5: Generate offsets
set(offs_points 0 1 2 3 4 5 6 7)
set(offs_split_0 0)
set(offs_split_1 1 1s)
set(offs_split_2 2 2s)
set(offs_split_3 3 3s)
set(offs_split_4 4 4s)
set(offs_split_5 5 5s)
set(offs_split_6 rootfs 6 6s)
set(offs_split_7 7 7s)


set(reg 0)
foreach(s ${offs_points})
    foreach(l ${offs_split_${s}})
        list(LENGTH syms_${l} len)
        math(EXPR reg "${reg}+${len}")
    endforeach()
    set(len_${s} ${reg})
endforeach()

# Output

file(WRITE ${output} "/* Autogenerated. Do not edit. */\n#include<stddef.h>\ntypedef int (*initcall_t)(void);\n\n${initcall_externs}\n\nstatic initcall_t initcalls[${len_7}];\n")

file(APPEND ${output} "const initcall_t* const __initcall_start = &initcalls[0];\n")
file(APPEND ${output} "const initcall_t* const __initcall0_start = &initcalls[0];\n")
file(APPEND ${output} "const initcall_t* const __initcall1_start = &initcalls[${len_0}];\n")
file(APPEND ${output} "const initcall_t* const __initcall2_start = &initcalls[${len_1}];\n")
file(APPEND ${output} "const initcall_t* const __initcall3_start = &initcalls[${len_2}];\n")
file(APPEND ${output} "const initcall_t* const __initcall4_start = &initcalls[${len_3}];\n")
file(APPEND ${output} "const initcall_t* const __initcall5_start = &initcalls[${len_4}];\n")
file(APPEND ${output} "const initcall_t* const __initcall6_start = &initcalls[${len_5}];\n")
file(APPEND ${output} "const initcall_t* const __initcall7_start = &initcalls[${len_6}];\n")
file(APPEND ${output} "const initcall_t* const __initcall_end = &initcalls[${len_7}];\n")

file(APPEND ${output} "void *memcpy(void *dest, const void *src, size_t n);\nvoid host_lkl_inittbl(void) {\n const initcall_t final_initcalls[] = {${initcall_listsym}};\nmemcpy(initcalls, final_initcalls, sizeof(initcall_t)*${len_7});\n}\n")
